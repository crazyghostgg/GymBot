// index.js
import "dotenv/config";
import { Telegraf, Markup } from "telegraf";
import { formatInTimeZone } from "date-fns-tz";
import db from "./db.js";
import { updateStatusPost } from "./statusPost.js";
import {
  getCurrentSubscription,
  getNextSubscription,
  getLastSubscription,
  hasAccess,
  addSubscription,
} from "./subscriptions.js";
const bot = new Telegraf(process.env.BOT_TOKEN);
const GROUP_CHAT_ID = process.env.GROUP_CHAT_ID?.trim() || null;
const PAYMENT_DETAILS =
  process.env.PAYMENT_DETAILS || "IBAN UA 72 322001 00000 2620 1363 6547 59";

/* ===== –ó–∞–≥–∞–ª—å–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Ç–∞ –ª—ñ–º—ñ—Ç—ñ–≤ ===== */
const TELEGRAM_SAFE_LIMIT = 3800; // —Ç—Ä–æ—Ö–∏ –º–µ–Ω—à–µ 4096
const SUBS_PER_PAGE = 30;
const USERS_PER_PAGE = 20;
const PRICE_UAH = { A: 119, B: 119, UNL: 229 };
const MONTHS_MIN = 1;
const MONTHS_MAX = 9;
const CURRENT_TERMS_VERSION = 2;
const WATCH_CHAT_IDS = (process.env.WATCH_CHAT_IDS || "")
  .split(",")
  .map((s) => s.trim())
  .filter(Boolean)
  .map(Number);

// ‚úÖ –ë–ï–õ–´–ô –°–ü–ò–°–û–ö, –∫—Ç–æ –º–æ–∂–µ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è ¬´–≤–∞—Ö—Ç—ë—Ä–æ–º¬ª
const WATCHER_ALLOW = new Set(
  (process.env.WATCHER_ALLOW_IDS || "")
    .split(",")
    .map((s) => s.trim())
    .filter(Boolean)
    .map(Number)
);

// ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–Ω—ã—Ö –≤–∞—Ö—Ç—ë—Ä–æ–≤ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
db.prepare(
  `CREATE TABLE IF NOT EXISTS watchers (
     user_id INTEGER PRIMARY KEY
   )`
).run();

// ‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –≤–∞—Ö—Ç—ë—Ä–∞–º–∏ (+ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫)
function isWatcher(userId) {
  return !!db.prepare(`SELECT 1 FROM watchers WHERE user_id=?`).get(userId);
}
function setWatcher(userId, on) {
  if (!WATCHER_ALLOW.has(Number(userId))) return false;
  if (on) {
    db.prepare(`INSERT OR IGNORE INTO watchers (user_id) VALUES (?)`).run(
      userId
    );
  } else {
    db.prepare(`DELETE FROM watchers WHERE user_id=?`).run(userId);
  }
  return true;
}

async function notifyWatchers(text, extra = {}) {
  const rows = db.prepare(`SELECT user_id FROM watchers`).all() || [];
  const dynamicIds = rows.map((r) => Number(r.user_id));
  const staticIds = (WATCH_CHAT_IDS || []).map(Number);
  const all = Array.from(new Set([...dynamicIds, ...staticIds]));
  if (!all.length) return;

  const tasks = all.map((id) =>
    bot.telegram
      .sendMessage(id, text, {
        parse_mode: "HTML",
        disable_notification: false,
        ...extra,
      })
      .catch((err) => {
        console.error("notifyWatchers error -> id:", id, err?.message || err);
      })
  );
  await Promise.allSettled(tasks);
}
function makeRef() {
  const rnd = Math.floor(Math.random() * 1000)
    .toString()
    .padStart(3, "0");
  return `${rnd}`;
}
function clampMonths(m) {
  return Math.min(MONTHS_MAX, Math.max(MONTHS_MIN, parseInt(m || "1", 10)));
}
function calcDiscountPct(months) {
  return Math.max(0, Math.min(24, (months - 1) * 3)); // 2 –º—ñ—Å ‚Üí 3%, 4 –º—ñ—Å ‚Üí 9%, 9 –º—ñ—Å ‚Üí 24%
}
function calcTotalUAH(plan, months) {
  const base = PRICE_UAH[plan];
  const pct = calcDiscountPct(months);
  return Math.round(base * months * (1 - pct / 100));
}
const TERMS_HTML = [
  "<b>–ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ—Ä—Ç–∑–∞–ª–æ–º</b>",
  "",
  "–ó–∞–ª –ø—Ä–∞—Ü—é—î <b>—Å–µ—Å—ñ—è–º–∏</b>. –ü–µ—Ä—à–∏–π, —Ö—Ç–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î —Å–µ—Å—ñ—é –≤ –±–æ—Ç—ñ ‚Äî <b>–∫–∞–ø—ñ—Ç–∞–Ω</b>.",
  "<u>–Ø–∫—â–æ –≤–∏ –Ω–µ –≥–æ—Ç–æ–≤—ñ –±—É—Ç–∏ –∫–∞–ø—ñ—Ç–∞–Ω–æ–º ‚Äî –∑–∞–ª–æ–º –Ω–µ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å.</u>",
  "",
  "<b>–ö–∞–ø—ñ—Ç–∞–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:</b>",
  "‚Ä¢ –ø–æ—Ä—è–¥–æ–∫ —É –∑–∞–ª—ñ;",
  "‚Ä¢ –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—ñ–¥–º—ñ—Ç–æ–∫ ¬´–£–≤—ñ–π—Ç–∏/–í–∏–π—Ç–∏¬ª –≤ –±–æ—Ç—ñ –¥–ª—è –≤—Å—ñ—Ö;",
  "‚Ä¢ –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó (–∑–∞—á–∏–Ω–∏—Ç–∏ –≤—ñ–∫–Ω–∞, –≤–∏–º–∫–Ω—É—Ç–∏ —Å–≤—ñ—Ç–ª–æ, –∑–∞–º–∫–Ω—É—Ç–∏ –¥–≤–µ—Ä—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –∫–ª—é—á).",
  "",
  "<b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å:</b>",
  "1) –í—ñ–∑—å–º—ñ—Ç—å –∫–ª—é—á –Ω–∞ –≤–∞—Ö—Ç—ñ –ø—ñ–¥ –ø—ñ–¥–ø–∏—Å.",
  "2) –£ –±–æ—Ç—ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü–æ—á–∞—Ç–∏ —Å–µ—Å—ñ—é¬ª (—Å—Ç–∞–Ω–µ—Ç–µ –∫–∞–ø—ñ—Ç–∞–Ω–æ–º) –∞–±–æ ¬´–£–≤—ñ–π—Ç–∏¬ª, —è–∫—â–æ —Å–µ—Å—ñ—é –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ.",
  "3) –ü—ñ–¥ —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ–∂–µ–Ω –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤—ñ–¥–º—ñ—á–∞—î ¬´–£–≤—ñ–π—Ç–∏/–í–∏–π—Ç–∏¬ª —É –±–æ—Ç—ñ.",
  "4) –Ø–∫—â–æ –≤–∏ –∫–∞–ø—ñ—Ç–∞–Ω —ñ –π–¥–µ—Ç–µ, –∞ —Ö—Ç–æ—Å—å –ª–∏—à–∞—î—Ç—å—Å—è ‚Äî <b>–ø–µ—Ä–µ–¥–∞–π—Ç–µ –∫–∞–ø—ñ—Ç–∞–Ω—Å—Ç–≤–æ</b> —É –±–æ—Ç—ñ.",
  "5) –Ø–∫—â–æ –≤–∏ –æ—Å—Ç–∞–Ω–Ω—ñ: –∑–∞–∫—Ä–∏–π—Ç–µ —Å–µ—Å—ñ—é, –∑–∞—á–∏–Ω—ñ—Ç—å –≤—ñ–∫–Ω–∞, –≤–∏–º–∫–Ω—ñ—Ç—å —Å–≤—ñ—Ç–ª–æ, –∑–∞–º–∫–Ω—ñ—Ç—å –¥–≤–µ—Ä—ñ —ñ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å –∫–ª—é—á.",
  "",
  "<b>–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å:</b>",
  "‚Ä¢ –Ø–∫—â–æ —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—è/–∑–Ω–∏–∫–ª–æ –ø—ñ–¥ —á–∞—Å —Å–µ—Å—ñ—ó ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å <b>—É—Å—ñ, —Ö—Ç–æ –±—É–≤ —É—Å–µ—Ä–µ–¥–∏–Ω—ñ</b> (–∞–±–æ –≤–∏–Ω–Ω–∏–π, —è–∫—â–æ –∑—ñ–∑–Ω–∞—î—Ç—å—Å—è).",
  "‚Ä¢ –Ø–∫—â–æ –∫–∞–ø—ñ—Ç–∞–Ω –Ω–µ –ø—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞–≤ –≤—Ö—ñ–¥/–≤–∏—Ö—ñ–¥ ‚Äî <b>–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞–ø—ñ—Ç–∞–Ω—ñ</b>.",
  "‚Ä¢ –Ø–∫—â–æ –∑–∞–±—É–ª–∏ –∑–∞—á–∏–Ω–∏—Ç–∏ –¥–≤–µ—Ä—ñ ‚Äî <b>–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç–æ–π, —Ö—Ç–æ –∑–∞–±—É–≤</b>.",
  "",
  "<b>–ê–Ω—É–ª—é–≤–∞–Ω–Ω—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç—É(–±–µ–∑ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤)</b>",
  "–ú–æ–∂–µ –±—É—Ç–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –ø—Ä–∏ –ø–æ—Ä—É—à–µ–Ω–Ω—ñ –ø—Ä–∞–≤–∏–ª –Ω–∏–∂—á–µ. –ê–±–æ –ø–∏—Å—å–º–æ–≤–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏—á–∏–Ω—É –ø–æ—Ä—É—à–µ–Ω–Ω—è, –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –∑–∞–≤—ñ–¥—É—é—á–æ—ó –≥—É—Ä—Ç–æ–∂–∏—Ç–∫–æ–º.",
  "‚Ä¢ —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –ø–æ—Ä—É—à–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ—Ä—Ç–∑–∞–ª–æ–º/–±–æ—Ç–æ–º;",
  "‚Ä¢ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –¥—ñ—ó;",
  "‚Ä¢ –æ–±–º–∞–Ω –∑ –æ–ø–ª–∞—Ç–æ—é –∞–±–æ –≥–æ—Å—Ç—è–º–∏;",
  "‚Ä¢ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –æ–±–æ–≤‚Äô—è–∑–∫—ñ–≤ –∫–∞–ø—ñ—Ç–∞–Ω–∞.",
  "‚Ä¢ –≤—ñ–¥–º–æ–≤–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–∏—Å—å–º–æ–≤–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ—Ä—É—à–µ–Ω–Ω—è",
  "",
  "‚ö†Ô∏è –û–ø–ª–∞—á—É—é—á–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —ñ –Ω–µ—Å–µ—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å –∑–∞ —Å–≤–æ—ó –¥—ñ—ó.",
].join("\n");

/* ===== –ß–∞—Å, —Ä–æ–ª—ñ, —É—Ç–∏–ª—ñ—Ç–∏ ===== */
const TZ = process.env.TZ || "Europe/Kyiv";

const ADMINS = new Set(
  (process.env.ADMINS || "")
    .split(",")
    .map((s) => s.trim())
    .filter(Boolean)
    .map((v) => Number(v))
);

const SUPER_ADMINS = new Set(
  (process.env.SUPER_ADMINS || "")
    .split(",")
    .map((s) => s.trim())
    .filter(Boolean)
    .map((v) => Number(v))
);
// HTML-–µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è (–ø—Ä–∞—Ü—é—î –Ω–∞ –±—É–¥—å-—è–∫—ñ–π –≤–µ—Ä—Å—ñ—ó Node)
const esc = (s) =>
  String(s ?? "")
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");

// —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω => —Ç–µ–∂ –∞–¥–º—ñ–Ω
function isSuperAdmin(id) {
  return SUPER_ADMINS.has(Number(id));
}
function isAdmin(id) {
  if (isSuperAdmin(id)) return true;
  // —è–∫—â–æ ADMINS –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –Ω–µ –æ–±–º–µ–∂—É—î–º–æ (—è–∫ —É —Ç–≤–æ—î–º—É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∫–æ–¥—ñ)
  return ADMINS.size === 0 || ADMINS.has(Number(id));
}
function notifyCaptain(s, text, exceptUserId = null) {
  if (!s?.captain_id) return;
  if (exceptUserId && Number(exceptUserId) === Number(s.captain_id)) return; // –Ω–µ —Å–ø–∞–º–∏—Ç–∏, —è–∫—â–æ –∞–≤—Ç–æ—Ä = –∫–∞–ø—ñ—Ç–∞–Ω
  return bot.telegram
    .sendMessage(s.captain_id, text, { disable_notification: true })
    .catch(() => {}); // –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∫–∞–ø—ñ—Ç–∞–Ω –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ / –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞–≤ —á–∞—Ç
}
function getUserById(userId) {
  return db.prepare(`SELECT * FROM users WHERE user_id = ?`).get(userId);
}

function hasAcceptedTerms(u) {
  return u?.terms_version >= CURRENT_TERMS_VERSION && u?.terms_accepted_at;
}

async function showTermsGate(ctx) {
  const kb = Markup.inlineKeyboard([
    [
      Markup.button.callback(
        "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–≤ —Ç–∞ –ø–æ–≥–æ–¥–∂—É—é—Å—å",
        `accept_terms:${CURRENT_TERMS_VERSION}`
      ),
    ],
  ]);
  return ctx.reply(TERMS_HTML, {
    parse_mode: "HTML",
    disable_web_page_preview: true,
    reply_markup: kb.reply_markup,
  });
}

bot.action(/copy_ref:(.+)/, async (ctx) => {
  const ref = ctx.match[1];
  await ctx.answerCbQuery("–í—ñ–¥–∫—Ä–∏–≤–∞—é —Ä–µ—Ñ–µ—Ä–µ–Ω—Å‚Ä¶ (—É—Ç—Ä–∏–º—É–π—Ç–µ, —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏)");
  return ctx.replyWithHTML(`<b>–†–µ—Ñ–µ—Ä–µ–Ω—Å-–∫–æ–¥</b>\n<code>${esc(ref)}</code>`);
});

bot.action("copy_details", async (ctx) => {
  await ctx.answerCbQuery("–í—ñ–¥–ø—Ä–∞–≤–ª—è—é —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏‚Ä¶");
  return ctx.replyWithHTML(
    `<b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏</b>\n<pre><code>${esc(PAYMENT_DETAILS)}</code></pre>`
  );
});

bot.action("how_receipt", async (ctx) => {
  await ctx.answerCbQuery();
  return ctx.replyWithHTML(
    [
      "üßæ <b>–Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é</b>",
      "‚Ä¢ –§–æ—Ç–æ: —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ —Å—É–º—É, –¥–∞—Ç—É, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è <u>–∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º</u>.",
      "‚Ä¢ PDF: –æ—Ä–∏–≥—ñ–Ω–∞–ª –∑ –±–∞–Ω–∫—É.",
      "–ü—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å: <code>review</code>. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—è—î –π –∞–∫—Ç–∏–≤—É—î –ø—ñ–¥–ø–∏—Å–∫—É.",
    ].join("\n")
  );
});

// –°–æ–≥–ª–∞—Å–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫ –æ–ø–ª–∞—Ç–µ
bot.action(/accept_terms:(\d+)/, async (ctx) => {
  const version = Number(ctx.match[1] || 0);
  const userId = ctx.from.id;

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ—Ç–∫—É –æ —Å–æ–≥–ª–∞—Å–∏–∏ (–Ω—É–∂–Ω—ã –ø–æ–ª—è –≤ –ë–î ‚Äî —Å–º. –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –Ω–∏–∂–µ)
  db.prepare(
    `
    UPDATE users
    SET terms_accepted_at = datetime('now'),
        terms_version = ?
    WHERE user_id = ?
  `
  ).run(version, userId);

  await ctx.answerCbQuery("–î—è–∫—É—î–º–æ!");
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}

  // —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–ª–∞–Ω–æ–≤
  return renderPlanSelect(ctx);
});

// —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É —ñ SQL-—Ä—è–¥–∫–∏
const toLocal = (s) =>
  s
    ? formatInTimeZone(
        new Date(s.replace(" ", "T") + "Z"),
        TZ,
        "yyyy-MM-dd HH:mm"
      )
    : "‚Äî";
const nowSql = () => new Date().toISOString().slice(0, 19).replace("T", " ");

function daysTextForPlan(plan) {
  if (plan === "A") return "–ü–Ω/–°—Ä/–ü—Ç/–ù–¥";
  if (plan === "B") return "–í—Ç/–ß—Ç/–°–±/–ù–¥";
  if (plan === "UNL") return "–±—É–¥—å-—è–∫–∏–π –¥–µ–Ω—å";
  return "‚Äî";
}

/* === –ß–∏—Ç–∞–±–µ–ª—å–Ω—ñ –Ω–∞–∑–≤–∏ —Ç–∞ –æ–ø–∏—Å–∏ –ø–ª–∞–Ω—ñ–≤ === */
function planName(code) {
  if (code === "A") return "1 –ü–ª–∞–Ω";
  if (code === "B") return "2 –ü–ª–∞–Ω";
  if (code === "UNL") return "UNLIMITED";
  return code || "‚Äî";
}
function planDescription(code) {
  if (code === "A") return "–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è: –ü–Ω/–°—Ä/–ü—Ç/–ù–¥";
  if (code === "B") return "–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è: –í—Ç/–ß—Ç/–°–±/–ù–¥";
  if (code === "UNL") return "–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è: –±—É–¥—å-—è–∫–∏–π –¥–µ–Ω—å";
  return "";
}

/* ===== –î–æ—Å—Ç—É–ø –∑–∞ –ø–ª–∞–Ω–æ–º —Ç–∞ —Å—Ç–∞–Ω–æ–º –æ–ø–ª–∞—Ç–∏ ===== */

// –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –¥–Ω—ñ —Ç–∏–∂–Ω—è –∑–∞ –ø–ª–∞–Ω–æ–º (ISO-–¥–µ–Ω—å: 1=–ü–Ω ... 7=–ù–¥)
function isAllowedToday(plan) {
  const isoDay = parseInt(formatInTimeZone(new Date(), TZ, "i"), 10); // 1..7
  if (plan === "UNL") return true;
  if (plan === "A") return [1, 3, 5, 7].includes(isoDay); // –ü–Ω/–°—Ä/–ü—Ç/–ù–¥
  if (plan === "B") return [2, 4, 6, 7].includes(isoDay); // –í—Ç/–ß—Ç/–°–±/–ù–¥
  return false;
}

function isPlanAllowedForFaculty(_faculty, plan) {
  return plan === "A" || plan === "B" || plan === "UNL";
}

function isPaid(user) {
  // –ù–æ–≤–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º: –∞–∫—Ç–∏–≤–Ω–∏–π –ø—ñ–¥–ø–∏—Å –∑–∞—Ä–∞–∑ —î –≤ subscriptions
  const sub = getCurrentSubscription(user.user_id);
  if (sub) return true;
  return false;
}

/* ===== –£—Ç–∏–ª—ñ—Ç–∏ –ë–î ===== */
const getActiveSession = () =>
  db.prepare(`SELECT * FROM sessions WHERE active=1`).get();

const getOpenVisit = (sessionId, userId) =>
  db
    .prepare(
      `SELECT * FROM visits WHERE session_id=? AND user_id=? AND exited_at IS NULL`
    )
    .get(sessionId, userId);

const countParticipants = (sessionId) =>
  db
    .prepare(
      `SELECT COUNT(*) as c FROM visits WHERE session_id=? AND exited_at IS NULL`
    )
    .get(sessionId).c;

const listParticipants = (sessionId) =>
  db
    .prepare(
      `SELECT u.user_id, u.name
       FROM visits v JOIN users u ON u.user_id=v.user_id
       WHERE v.session_id=? AND v.exited_at IS NULL ORDER BY u.name`
    )
    .all(sessionId);

const getUser = (id) =>
  db.prepare(`SELECT * FROM users WHERE user_id=?`).get(id);

const getNameById = (id) =>
  db.prepare(`SELECT name FROM users WHERE user_id=?`).get(id)?.name || "‚Äî";

function sqlFromDate(d) {
  return d.toISOString().slice(0, 19).replace("T", " ");
}

/* ===== –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á –ø–æ–º–∏–ª–æ–∫ Telegraf ===== */
bot.catch((err) => {
  console.error("Unhandled bot error:", err);
});

/* ===== –ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É ===== */
async function sendOrEdit(ctx, text, extra = {}) {
  try {
    // —è–∫—â–æ –≤–∏–∫–ª–∏–∫ —ñ–∑ callback ‚Äî –ø—Ä–æ–±—É—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
    if (ctx.update?.callback_query?.message) {
      await ctx.editMessageText(text, extra);
    } else {
      await ctx.reply(text, extra);
    }
  } catch (e) {
    // fallback: –ø—Ä–æ—Å—Ç–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try {
      await ctx.reply(text, extra);
    } catch (e2) {
      console.error("sendOrEdit failed:", e2);
    }
  }
}
/* ===== –ö–û–ú–ê–ù–î–ê PUSHSTATUS ===== */
bot.command("pushstatus", async (ctx) => {
  try {
    await updateStatusPost(bot, GROUP_CHAT_ID);
    return ctx.reply("–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ.");
  } catch (e) {
    console.error("pushstatus error:", e);
    return ctx.reply("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: " + (e.message || e));
  }
});
bot.action(/cancel_payment:(.+)/, async (ctx) => {
  const ref = ctx.match[1];

  const row = db
    .prepare(
      `
    SELECT id, status FROM payments
    WHERE user_id = ? AND ref_code = ?
    ORDER BY created_at DESC LIMIT 1
  `
    )
    .get(ctx.from.id, ref);

  if (!row) {
    return ctx.answerCbQuery("–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", { show_alert: true });
  }
  if (!["pending", "review"].includes(row.status)) {
    return ctx.answerCbQuery("–¶—é –∑–∞—è–≤–∫—É –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ, —Å–∫–∞—Å—É–≤–∞—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞.", {
      show_alert: true,
    });
  }

  // ‚úÖ –°—É–º—ñ—Å–Ω–æ –∑ CHECK-–æ–±–º–µ–∂–µ–Ω–Ω—è–º
  db.prepare(`UPDATE payments SET status = 'rejected' WHERE id = ?`).run(
    row.id
  );

  // –ü—Ä–∏–±—Ä–∞—Ç–∏ –∫–Ω–æ–ø–∫—É ¬´–°–∫–∞—Å—É–≤–∞—Ç–∏¬ª –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
  try {
    await ctx.editMessageReplyMarkup({
      inline_keyboard: [
        [Markup.button.callback("üìé –†–µ—Ñ–µ—Ä–µ–Ω—Å-–∫–æ–¥", `copy_ref:${ref}`)],
        [Markup.button.callback("üè¶ –†–µ–∫–≤—ñ–∑–∏—Ç–∏", "copy_details")],
      ],
    });
  } catch {}

  await ctx.answerCbQuery("–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
  return ctx.reply("‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ (—Å—Ç–∞—Ç—É—Å: rejected).");
});
/* ===== –ü–æ–∫—Ä–æ–∫–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ===== */
const getRegState = (id) =>
  db.prepare(`SELECT * FROM reg_state WHERE user_id=?`).get(id);
const setRegState = (id, step, tmp_first = null, tmp_last = null) => {
  const row = getRegState(id);
  if (row) {
    db.prepare(
      `UPDATE reg_state SET step=?, tmp_first=?, tmp_last=? WHERE user_id=?`
    ).run(step, tmp_first, tmp_last, id);
  } else {
    db.prepare(
      `INSERT INTO reg_state (user_id, step, tmp_first, tmp_last) VALUES (?,?,?,?)`
    ).run(id, step, tmp_first, tmp_last);
  }
};
const clearRegState = (id) =>
  db.prepare(`DELETE FROM reg_state WHERE user_id=?`).run(id);

const NAME_RE = /^[A-Za-z–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î' -]{2,30}$/;
const ROOM_RE = /^[0-9]{1,4}[A-Za-z–ê-–Ø–∞-—è-]{0,2}$/;

/* –ö–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É */
const FACULTY_MAP = { IATE: "–ù–ù –Ü–ê–¢–ï", ISZI: "–Ü–°–ó–Ü" };
const facultyKeyboard = () =>
  Markup.inlineKeyboard([
    [Markup.button.callback("–ù–ù –Ü–ê–¢–ï", "reg:fac:IATE")],
    [Markup.button.callback("–Ü–°–ó–Ü", "reg:fac:ISZI")],
  ]);

function promptFaculty(ctx) {
  return ctx.reply(
    "–í —è–∫–æ–º—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ –í–∏ –Ω–∞–≤—á–∞—î—Ç–µ—Å—å? –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç:",
    facultyKeyboard()
  );
}

function startRegistration(ctx) {
  const uid = ctx.from.id;
  clearRegState(uid);
  setRegState(uid, "FIRST_NAME");
  return ctx.reply("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è.\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *—ñ–º'—è* (2‚Äì30 —Å–∏–º–≤–æ–ª—ñ–≤).", {
    parse_mode: "Markdown",
  });
}

function requireRegistered(ctx) {
  const uid = ctx.from.id;
  const u = getUser(uid);
  if (u && u.registered) return u;

  const rs = getRegState(uid);
  if (rs?.step === "FACULTY") {
    promptFaculty(ctx);
    return null;
  }

  startRegistration(ctx);
  return null;
}

/* –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó */
bot.on("text", (ctx, next) => {
  const uid = ctx.from?.id;
  if (!uid) return next();

  const rs = getRegState(uid);
  if (!rs) return next();

  const text = (ctx.message.text || "").trim();

  if (rs.step === "FIRST_NAME") {
    if (!NAME_RE.test(text))
      return ctx.reply(
        "–Ü–º'—è –≤–∏–≥–ª—è–¥–∞—î –¥–∏–≤–Ω–æ. –í–≤–µ–¥—ñ—Ç—å *–ª–∏—à–µ —ñ–º'—è* (2‚Äì30 —Å–∏–º–≤–æ–ª—ñ–≤).",
        { parse_mode: "Markdown" }
      );
    setRegState(uid, "LAST_NAME", text, rs.tmp_last);
    return ctx.reply("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *–ø—Ä—ñ–∑–≤–∏—â–µ*.", {
      parse_mode: "Markdown",
    });
  }

  if (rs.step === "LAST_NAME") {
    if (!NAME_RE.test(text))
      return ctx.reply(
        "–ü—Ä—ñ–∑–≤–∏—â–µ –≤–∏–≥–ª—è–¥–∞—î –¥–∏–≤–Ω–æ. –í–≤–µ–¥—ñ—Ç—å *–ª–∏—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ* (2‚Äì30 —Å–∏–º–≤–æ–ª—ñ–≤).",
        { parse_mode: "Markdown" }
      );
    setRegState(uid, "ROOM", rs.tmp_first, text);
    return ctx.reply("–ù–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, *412*).", {
      parse_mode: "Markdown",
    });
  }

  if (rs.step === "ROOM") {
    if (!ROOM_RE.test(text))
      return ctx.reply(
        "–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∫—ñ–º–Ω–∞—Ç–∏ (1‚Äì4 —Ü–∏—Ñ—Ä–∏, –º–æ–∂–Ω–∞ –ª—ñ—Ç–µ—Ä—É: 412–ê)."
      );
    const room = text;
    const first = rs.tmp_first;
    const last = rs.tmp_last;

    const u = getUser(uid);
    const username = ctx.from?.username || null;
    if (u) {
      db.prepare(
        `UPDATE users
         SET first_name=?, last_name=?, name=?, room=?, username=?, registered=0
         WHERE user_id=?`
      ).run(first, last, `${first} ${last}`, room, username, uid);
    } else {
      db.prepare(
        `INSERT INTO users (user_id, name, room, first_name, last_name, username, registered)
         VALUES (?,?,?,?,?,?,0)`
      ).run(uid, `${first} ${last}`, room, first, last, username);
    }
    setRegState(uid, "FACULTY");
    return promptFaculty(ctx);
  }

  if (rs.step === "FACULTY") {
    return ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç *–∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ*.", {
      parse_mode: "Markdown",
      ...facultyKeyboard(),
    });
  }

  return next();
});

/* ===== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ===== */
function mainKeyboard(userId, session, inside) {
  const kb = [];

  // –∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
  kb.push(["–û–ø–ª–∞—Ç–∏—Ç–∏", "–ú—ñ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç"]);

  if (session) {
    if (inside) kb.push(["–í–∏–π—Ç–∏"]);
    else kb.push(["–£–≤—ñ–π—Ç–∏"]);

    const isCaptain = session.captain_id === userId;
    if (isCaptain) kb.push(["–ü–µ—Ä–µ–¥–∞—Ç–∏ –∫–∞–ø—ñ—Ç–∞–Ω–∞"]); // –∑–∞–≤–∂–¥–∏ –≤–∏–¥–∏–º–∞ –∫–∞–ø—ñ—Ç–∞–Ω—É
  } else {
    kb.push(["–ü–æ—á–∞—Ç–∏ —Å–µ—Å—ñ—é"]);
  }

  // ‚úÖ –ö–Ω–æ–ø–∫–∏ –≤–∞—Ö—Ç—ë—Ä–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
  if (WATCHER_ALLOW.has(Number(userId))) {
    const watcherOn = isWatcher(userId);
    kb.push([watcherOn ? "‚ùå –í–∏–π—Ç–∏ –∑ –≤–∞—Ö—Ç–∏" : "üëÆ –í—Å—Ç–∞—Ç–∏ –Ω–∞ –≤–∞—Ö—Ç—É"]);
  }

  kb.push(["–°—Ç–∞—Ç—É—Å"]);
  if (isAdmin(userId)) kb.push(["–ú–µ–Ω—é –ê–¥–º—ñ–Ω–∞"]);

  return Markup.keyboard(kb).resize();
}

/* ===== /start ‚Äî –ø–æ–∫–∞–∑ –ø—Ä–æ—Ñ—ñ–ª—é/—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ===== */
bot.command("chatid", (ctx) => ctx.reply(`Chat ID: ${ctx.chat.id}`));
bot.start((ctx) => {
  const uid = ctx.from.id;
  const u = getUser(uid);
  const s = getActiveSession();
  const inside = s ? !!getOpenVisit(s.id, uid) : false;

  if (!u || !u.registered) {
    const rs = getRegState(uid);
    if (rs?.step === "FACULTY") return promptFaculty(ctx);
    return startRegistration(ctx);
  }

  const full = `${u.first_name || ""} ${u.last_name || ""}`.trim() || u.name;
  return ctx.reply(
    `–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.\n–Ü–º'—è: ${full}\n–ö—ñ–º–Ω–∞—Ç–∞: ${u.room}${
      u.faculty ? `\n–§–∞–∫—É–ª—å—Ç–µ—Ç: ${u.faculty}` : ""
    }`,
    mainKeyboard(uid, s, inside)
  );
});

/* ===== –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –≤–∏–±—ñ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É ===== */
bot.on("callback_query", async (ctx, next) => {
  const data = ctx.callbackQuery.data || "";

  // –≤–∏–±—ñ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É
  if (data.startsWith("reg:fac:")) {
    const code = data.split(":")[2]; // IATE | ISZI
    const faculty = { IATE: "–ù–ù –Ü–ê–¢–ï", ISZI: "–Ü–°–ó–Ü" }[code] || null;
    const uid = ctx.from.id;
    if (!faculty) {
      await ctx.answerCbQuery("–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.");
      return;
    }
    db.prepare(`UPDATE users SET faculty=?, registered=1 WHERE user_id=?`).run(
      faculty,
      uid
    );
    clearRegState(uid);

    const s = getActiveSession();
    const inside = s ? !!getOpenVisit(s.id, uid) : false;
    const u = getUser(uid);
    const full = `${u.first_name || ""} ${u.last_name || ""}`.trim() || u.name;

    await ctx.editMessageText(
      `–î—è–∫—É—î–º–æ! –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n–Ü–º'—è: ${full}\n–ö—ñ–º–Ω–∞—Ç–∞: ${u.room}\n–§–∞–∫—É–ª—å—Ç–µ—Ç: ${faculty}`
    );
    await ctx.reply(
      "–ú–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ.",
      mainKeyboard(uid, s, inside)
    );
    await ctx.answerCbQuery("–ó–±–µ—Ä–µ–∂–µ–Ω–æ.");
    return;
  }

  return next();
});

/* ===== –ü–†–û–§–Ü–õ–¨: –ú—ñ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç ===== */
bot.hears("–ú—ñ–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç", async (ctx) => {
  const u = requireRegistered(ctx);
  if (!u) return;

  const s = getActiveSession();
  const inside = s ? !!getOpenVisit(s.id, u.user_id) : false;

  const cur = getCurrentSubscription(u.user_id);
  const next = getNextSubscription(u.user_id);

  let text = "";
  if (cur) {
    text += `–°—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: *–∞–∫—Ç–∏–≤–Ω–∏–π*\n`;
    text += `–ü–æ—Ç–æ—á–Ω–∏–π –ø–ª–∞–Ω: ${planName(cur.plan)}\n${planDescription(
      cur.plan
    )}\n`;
    text += `–ü–µ—Ä—ñ–æ–¥: ${toLocal(cur.start_at)} ‚Üí ${toLocal(cur.end_at)}\n`;
  } else {
    text += `–°—Ç–∞—Ç—É—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞: *–Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É*\n`;
  }

  if (next) {
    text += `\n–ù–∞—Å—Ç—É–ø–Ω–∏–π –ø–µ—Ä—ñ–æ–¥:\n`;
    text += `${planName(next.plan)}\n${planDescription(next.plan)}\n`;
    text += `–ü–µ—Ä—ñ–æ–¥: ${toLocal(next.start_at)} ‚Üí ${toLocal(next.end_at)}\n`;
  }

  const kb = mainKeyboard(u.user_id, s, inside);
  await ctx.reply(text.trim(), {
    parse_mode: "Markdown",
    reply_markup: kb.reply_markup,
  });
});

/* ===== –û–ü–õ–ê–¢–ê (–Ω–∞–ø—ñ–≤—Ä—É—á–Ω–∞) ===== */

// –ú–µ–Ω—é –æ–ø–ª–∞—Ç–∏
// helper: –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–ª–∞–Ω–æ–≤ (—á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å –∏ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è)
async function renderPlanSelect(ctx, u) {
  const user = u || getUser(ctx.from.id);
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É (–Ü–°–ó–Ü: —Ç–æ–ª—å–∫–æ A/B; –Ü–ê–¢–ï: + UNL)
  const rows = [
    [Markup.button.callback("1 –ü–ª–∞–Ω (119‚Ç¥/–º—ñ—Å)", "pay:plan:A")],
    [Markup.button.callback("2 –ü–ª–∞–Ω (119‚Ç¥/–º—ñ—Å)", "pay:plan:B")],
    [Markup.button.callback("UNLIMITED (229‚Ç¥/–º—ñ—Å)", "pay:plan:UNL")],
  ];

  const text =
    "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:\n" +
    "‚Ä¢ 1 –ü–ª–∞–Ω ‚Äî –ü–Ω/–°—Ä/–ü—Ç/–ù–¥\n" +
    "‚Ä¢ 2 –ü–ª–∞–Ω ‚Äî –í—Ç/–ß—Ç/–°–±/–ù–¥\n" +
    "‚Ä¢ UNLIMITED ‚Äî –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –∑–∞ –¥–Ω—è–º–∏";

  return ctx.reply(text, Markup.inlineKeyboard(rows));
}

// –ú–µ–Ω—é –æ–ø–ª–∞—Ç–∏ (—Ç–µ–ø–µ—Ä—å —Å –≥–µ–π—Ç–æ–º –ø—Ä–∞–≤–∏–ª)
bot.hears("–û–ø–ª–∞—Ç–∏—Ç–∏", async (ctx) => {
  const u = requireRegistered(ctx);
  if (!u) return;

  // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∞–≤–∏–ª–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–µ–π—Ç –∏ –≤—ã—Ö–æ–¥–∏–º
  if (!hasAcceptedTerms(u)) {
    return showTermsGate(ctx);
  }

  // —É–∂–µ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–ª–∞–Ω–æ–≤
  return renderPlanSelect(ctx, u);
});

// === –ù–û–í–ï: –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ü–õ–ê–ù–£ –ø–æ–∫–∞–∑—É—î–º–æ –≤–∏–±—ñ—Ä –º—ñ—Å—è—Ü—ñ–≤ 1‚Äì9 —ñ–∑ –∑–Ω–∏–∂–∫–æ—é
bot.on("callback_query", async (ctx, next) => {
  const data = ctx.callbackQuery.data || "";
  if (!data.startsWith("pay:plan:")) return next();

  const plan = data.split(":")[2]; // A|B|UNL
  const uid = ctx.from.id;
  const u = getUser(uid);
  if (!u || !u.registered) {
    await ctx.answerCbQuery("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.", {
      show_alert: true,
    });
    return;
  }

  if (!isPlanAllowedForFaculty(u.faculty, plan)) {
    await ctx.answerCbQuery("–¶–µ–π –ø–ª–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤–∞—à–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É.", {
      show_alert: true,
    });
    return;
  }

  const rows = [];
  for (let m = 1; m <= 9; m++) {
    const total = calcTotalUAH(plan, m);
    const pct = calcDiscountPct(m);
    rows.push([
      Markup.button.callback(
        `${m} –º—ñ—Å. ‚Äî ${total}‚Ç¥${pct ? ` (-${pct}%)` : ""}`,
        `pay:months:${plan}:${m}`
      ),
    ]);
  }

  await sendOrEdit(
    ctx,
    "–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (1‚Äì9 –º—ñ—Å—è—Ü—ñ–≤). –ó–Ω–∏–∂–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –≤—Å—å–æ–≥–æ —á–µ–∫—É.",
    Markup.inlineKeyboard(rows)
  );
  await ctx.answerCbQuery().catch(() => {});
});

// === –ù–û–í–ï: –ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—ñ—Å—è—Ü—ñ–≤ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ pending —ñ–∑ months/discount/amount_uah
bot.on("callback_query", async (ctx, next) => {
  const data = ctx.callbackQuery.data || "";
  if (!data.startsWith("pay:months:")) return next();
  {
    // –§–æ—Ä–º–∞—Ç: pay:months:<PLAN>:<M>
    const [, , plan, mStr] = data.split(":");
    if (!["A", "B", "UNL"].includes(plan)) {
      await ctx.answerCbQuery("–ù–µ–≤—ñ–¥–æ–º–∏–π –ø–ª–∞–Ω.");
      return;
    }
    const months = clampMonths(mStr);
    const pct = calcDiscountPct(months);
    const amountUAH = calcTotalUAH(plan, months); // —Å—É–º–∞ –≤ –≥—Ä–Ω –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–Ω–∏–∂–∫–∏
    const amount = amountUAH * 100; // —É –∫–æ–ø—ñ–π–∫–∞—Ö –¥–ª—è payments.amount (NOT NULL)
    const u = getUser(ctx.from.id);
    if (!u) {
      await ctx.answerCbQuery("–ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞.");
      return;
    }
    const ref = makeRef(u.user_id); // —è–∫ —ñ –±—É–ª–æ
    const details = PAYMENT_DETAILS; // —Ç–µ–ø–µ—Ä –±–µ—Ä–µ–º–æ –∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏/.env

    // —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É (–±–µ–∑ –∫–æ–ª–æ–Ω–∫–∏ details ‚Äî –≤–æ–Ω–∞ –π –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
    db.prepare(
      `
  INSERT INTO payments (
    user_id, plan, amount, amount_uah, ref_code, status, months, discount_percent, created_at
  ) VALUES (?,?,?,?,?, 'pending', ?, ?, datetime('now'))
`
    ).run(u.user_id, plan, amount, amountUAH, ref, months, pct);

    // HTML –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏
    const messageHtml = [
      "‚îè‚îÅ‚îÅ <b>–ó–ê–Ø–í–ö–£ –°–¢–í–û–†–ï–ù–û</b> ‚îÅ‚îÅ‚îì",
      `<b>${esc(planName(plan))}</b>`,
      `${esc(planDescription(plan))}`,
      `–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>${months} –º—ñ—Å.</b>`,
      `–ó–Ω–∏–∂–∫–∞: <b>${pct}%</b>`,
      `–î–æ —Å–ø–ª–∞—Ç–∏: <b>${amountUAH}‚Ç¥</b>`,
      "",
      "‚ö†Ô∏è <u><b>–í–ê–ñ–õ–ò–í–û: –†–ï–§–ï–†–ï–ù–°-–ö–û–î</b></u>",
      `<code>${esc(ref)}</code>`,
      "–î–æ–¥–∞–π—Ç–µ —Ü–µ–π –∫–æ–¥ —É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ –ø–ª–∞—Ç–µ–∂—É <b>–±–µ–∑ –∑–º—ñ–Ω</b>.",
      "",
      "<b>–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏</b>",
      `<pre><code>${esc(details)}</code></pre>`,
      "",
      "<b>–©–æ –¥–∞–ª—ñ</b>",
      "1) –û–ø–ª–∞—Ç—ñ—Ç—å –∑–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏ –∑ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º.",
      "2) –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü—ñ—é —Å—é–¥–∏ (—Ñ–æ—Ç–æ –∞–±–æ PDF).",
      "3) –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
    ].join("\n");

    // –ö–Ω–æ–ø–∫–∏: —Ä–µ—Ñ–µ—Ä–µ–Ω—Å, —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏, –°–ö–ê–°–£–í–ê–¢–ò
    const kb = Markup.inlineKeyboard([
      [Markup.button.callback("üìé –†–µ—Ñ–µ—Ä–µ–Ω—Å-–∫–æ–¥", `copy_ref:${ref}`)],
      [Markup.button.callback("üè¶ –†–µ–∫–≤—ñ–∑–∏—Ç–∏", "copy_details")],
      [Markup.button.callback("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞—è–≤–∫—É", `cancel_payment:${ref}`)],
    ]);

    // ... –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è messageHtml –∏ kb
    await sendOrEdit(ctx, messageHtml, {
      parse_mode: "HTML",
      disable_web_page_preview: true,
      reply_markup: kb.reply_markup,
    });

    await ctx.answerCbQuery("–ó–∞—è–≤–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞.").catch(() => {});

    notifySupers(
      `üÜï –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞: ${u.name} (id:${u.user_id}) ‚Äî ${planName(
        plan
      )}, ${months} –º—ñ—Å., -${pct}%, —Å—É–º–∞ ${amountUAH}‚Ç¥, ref=${ref}`
    );

    await ctx.answerCbQuery("–ó–∞—è–≤–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞.").catch(() => {});
    return;
  }
});
/* ===== –ü—Ä–∏–π–æ–º –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó: —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç ‚Üí status: review ===== */
bot.on(["photo", "document"], async (ctx) => {
  const uid = ctx.from.id;
  const u = getUser(uid);
  if (!u || !u.registered) return; // –ª–∏—à–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ

  // –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∞–∫—Ç–∏–≤–Ω—É –∑–∞—è–≤–∫—É —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const p = db
    .prepare(
      `
    SELECT * FROM payments
    WHERE user_id = ? AND status IN ('pending','review')
    ORDER BY created_at DESC
    LIMIT 1
  `
    )
    .get(uid);

  if (!p) {
    return ctx.reply(
      "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–û–ø–ª–∞—Ç–∏—Ç–∏¬ª —ñ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤—É."
    );
  }

  // –î—ñ—Å—Ç–∞—î–º–æ file_id –∑ —Ñ–æ—Ç–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  let fileId = null;
  if (ctx.message.photo?.length) {
    fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id; // –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
  } else if (ctx.message.document) {
    fileId = ctx.message.document.file_id;
  }
  if (!fileId) {
    return ctx.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–µ —Ä–∞–∑.");
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ —á–µ–∫ + —Å—Ç–∞—Ç—É—Å: pending ‚Üí review; —è–∫—â–æ –≤–∂–µ review ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Ñ–∞–π–ª
  db.prepare(
    `
    UPDATE payments
    SET proof_file_id = ?,
        status = CASE WHEN status='pending' THEN 'review' ELSE status END
    WHERE id = ?
  `
  ).run(fileId, p.id);

  await ctx.reply("‚úÖ –ß–µ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.");

  // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ–≤
  try {
    notifySupers(
      `üîé –ó–∞—è–≤–∫–∞ *review*: ${u.name} (id:${uid}), ${planName(p.plan)}, ref=${
        p.ref_code
      }`
    );
  } catch {}
});

/* ===== –ú–µ–Ω—é –ê–¥–º—ñ–Ω–∞ ===== */
bot.hears("–ú–µ–Ω—é –ê–¥–º—ñ–Ω–∞", async (ctx) => {
  const u = requireRegistered(ctx);
  if (!u) return;
  if (!isAdmin(u.user_id)) return ctx.reply("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.");

  // –ë–∞–∑–æ–≤—ñ –ø—É–Ω–∫—Ç–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞ (—è–∫ —ñ –±—É–ª–æ): –£—á–∞—Å–Ω–∏–∫–∏ / –Ü—Å—Ç–æ—Ä—ñ—è / –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é
  const rows = [
    [Markup.button.callback("–£—á–∞—Å–Ω–∏–∫–∏", "adm:users:1")],
    [Markup.button.callback("–Ü—Å—Ç–æ—Ä—ñ—è", "adm:hist")],
    [Markup.button.callback("–û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é", "adm:clear")],
  ];

  // –†–æ–∑—à–∏—Ä–µ–Ω—ñ –ø—É–Ω–∫—Ç–∏ (–≤–∏–¥–∏–º—ñ –≤—Å—ñ–º –∞–¥–º—ñ–Ω–∞–º, –∞–ª–µ –¥—ñ—è ‚Äî —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ–≤)
  rows.push([Markup.button.callback("–ß–µ—Ä–≥–∞ –æ–ø–ª–∞—Ç", "sa:q:1")]);
  rows.push([Markup.button.callback("–ê–∫—Ç–∏–≤–Ω—ñ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∏", "sa:active:1")]);
  rows.push([Markup.button.callback("–ù–∞–¥–∞—Ç–∏/–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—Ä—É—á–Ω—É", "sa:grant")]);
  rows.push([Markup.button.callback("–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏/–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏", "sa:block")]);
  rows.push([Markup.button.callback("–ñ—É—Ä–Ω–∞–ª –¥—ñ–π", "sa:log:1")]);

  await ctx.reply("–ú–µ–Ω—é –ê–¥–º—ñ–Ω–∞:", Markup.inlineKeyboard(rows));
});

/* ===== –î–æ–ø–æ–º—ñ–∂–Ω—ñ: –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É –∑–∞ —Ä–æ–∑–º—ñ—Ä–æ–º ===== */
function splitByLimit(text, limit = TELEGRAM_SAFE_LIMIT) {
  const parts = [];
  for (let i = 0; i < text.length; i += limit) {
    parts.push(text.slice(i, i + limit));
  }
  return parts;
}

/* ===== –û–±—Ä–æ–±–∫–∞ callback'—ñ–≤ –±–∞–∑–æ–≤–∏—Ö –∞–¥–º—ñ–Ω-—Ñ—É–Ω–∫—Ü—ñ–π ===== */
bot.on("callback_query", async (ctx, next) => {
  const data = ctx.callbackQuery.data || "";

  // --- –£—á–∞—Å–Ω–∏–∫–∏ (–ø–∞–≥—ñ–Ω–∞—Ü—ñ—è) ---
  function buildUsersPage(page) {
    const users = db
      .prepare(
        `
    SELECT u.user_id, u.name, u.room, u.username, u.faculty, u.registered,
           COUNT(v.session_id) AS sessions
    FROM users u
    LEFT JOIN visits v
      ON v.user_id = u.user_id AND v.exited_at IS NOT NULL
    WHERE u.registered = 1
    GROUP BY u.user_id
    ORDER BY sessions DESC, u.name ASC
  `
      )
      .all();

    const totalPages = Math.max(1, Math.ceil(users.length / USERS_PER_PAGE));
    const current = Math.min(Math.max(1, page), totalPages);
    const slice = users.slice(
      (current - 1) * USERS_PER_PAGE,
      current * USERS_PER_PAGE
    );

    const lines = slice.map((row, idx) => {
      const link = row.username ? ` @${row.username}` : "";
      return `${(current - 1) * USERS_PER_PAGE + idx + 1}. ${
        row.name
      }${link} (–∫.${row.room}${
        row.faculty ? `, ${row.faculty}` : ""
      }) ‚Äî —Å–µ—Å—ñ–π: ${row.sessions}`;
    });

    let text =
      `–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É—á–∞—Å–Ω–∏–∫–∏: ${users.length}\n–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${current}/${totalPages}\n\n` +
      (lines.join("\n") || "‚Äî");

    // –±–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä—ñ–∑–∫–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ 400
    if (text.length > TELEGRAM_SAFE_LIMIT) {
      text = text.slice(0, TELEGRAM_SAFE_LIMIT - 3) + "...";
    }

    const navRow = [];
    if (current > 1)
      navRow.push(
        Markup.button.callback("¬´ –ù–∞–∑–∞–¥", `adm:users:${current - 1}`)
      );
    if (current < totalPages)
      navRow.push(
        Markup.button.callback("–í–ø–µ—Ä–µ–¥ ¬ª", `adm:users:${current + 1}`)
      );

    const extra = navRow.length
      ? { reply_markup: { inline_keyboard: [navRow] } }
      : undefined;

    return { text, extra };
  }

  // –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É (–∫–Ω–æ–ø–∫–∞ ¬´–£—á–∞—Å–Ω–∏–∫–∏¬ª —É –º–µ–Ω—é –∞–¥–º—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ adm:users:1)
  bot.action(/^adm:users:(\d+)$/, async (ctx) => {
    const me = getUser(ctx.from.id);
    if (!me || !isAdmin(me.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.", { show_alert: true });
      return;
    }

    const page = Number(ctx.match[1] || 1);
    const { text, extra } = buildUsersPage(page);

    try {
      await ctx.editMessageText(text, extra);
    } catch {
      // —è–∫—â–æ –Ω–µ –≤–∏–π—à–ª–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ ‚Äî —à–ª–µ–º–æ –Ω–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
      await ctx.reply(text, extra);
    }

    await ctx.answerCbQuery().catch(() => {});
  });

  // --- –Ü—Å—Ç–æ—Ä—ñ—è (—Å–ø–∏—Å–æ–∫ –¥–∞—Ç) ---
  if (data === "adm:hist") {
    const u = getUser(ctx.from.id);
    if (!u || !isAdmin(u.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.", { show_alert: true });
      return;
    }

    const dates = db
      .prepare(
        `SELECT DISTINCT substr(started_at,1,10) AS d
         FROM sessions ORDER BY d DESC LIMIT 28`
      )
      .all();

    if (!dates.length) {
      await sendOrEdit(ctx, "–°–µ—Å—ñ–π –ø–æ–∫–∏ –Ω–µ–º–∞—î.");
      return;
    }

    const buttons = dates.map((r) => [
      Markup.button.callback(r.d, `hist:${r.d}:1`),
    ]);
    await sendOrEdit(ctx, "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:", Markup.inlineKeyboard(buttons));
    return;
  }

  // --- –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é ---
  if (data === "adm:clear") {
    const u = getUser(ctx.from.id);
    if (!u || !isAdmin(u.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.", { show_alert: true });
      return;
    }
    try {
      const clearTx = db.transaction(() => {
        db.prepare(`DELETE FROM visits`).run();
        db.prepare(`DELETE FROM captain_changes`).run();
        db.prepare(`DELETE FROM sessions`).run();
      });
      clearTx();
      await sendOrEdit(ctx, "–Ü—Å—Ç–æ—Ä—ñ—é –∑–∞–ª–∞ –æ—á–∏—â–µ–Ω–æ (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ).");
    } catch (e) {
      await ctx.answerCbQuery(`–ü–æ–º–∏–ª–∫–∞: ${e.message}`, { show_alert: true });
    }
    return;
  }

  // --- –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞ –¥–∞—Ç—É (–ø–∞–≥—ñ–Ω–∞—Ü—ñ—è) ---
  if (data.startsWith("hist:")) {
    const u = getUser(ctx.from.id);
    if (!u || !isAdmin(u.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.", { show_alert: true });
      return;
    }

    const [, day, pageStr] = data.split(":");
    const page = Math.max(1, parseInt(pageStr || "1", 10));

    const fromSql = `${day} 00:00:00`;
    const toSqlEnd = `${day} 23:59:59`;

    const sessions = db
      .prepare(
        `SELECT s.id, s.started_at, s.ended_at, s.captain_id
         FROM sessions s
         WHERE s.started_at BETWEEN ? AND ?
         ORDER BY s.started_at ASC`
      )
      .all(fromSql, toSqlEnd);

    if (!sessions.length) {
      await sendOrEdit(ctx, `–ó–∞ ${day} —Å–µ—Å—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
      return;
    }

    const blocks = [];
    let buf = `–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞ ${day}\n\n`;
    for (const s of sessions) {
      const people = db
        .prepare(
          `SELECT u.name, u.room, v.entered_at, v.exited_at
           FROM visits v JOIN users u ON u.user_id=v.user_id
           WHERE v.session_id=? ORDER BY v.entered_at`
        )
        .all(s.id);

      const changes = db
        .prepare(
          `SELECT old_captain_id, new_captain_id, changed_at
           FROM captain_changes
           WHERE session_id=? ORDER BY changed_at`
        )
        .all(s.id);

      const firstCaptain = changes[0]?.new_captain_id
        ? getNameById(changes[0].new_captain_id)
        : getNameById(s.captain_id);

      const lastCaptain = changes[changes.length - 1]?.new_captain_id
        ? getNameById(changes[changes.length - 1].new_captain_id)
        : getNameById(s.captain_id);

      const transfers =
        changes
          .filter((c) => c.old_captain_id != null)
          .map(
            (c) =>
              `  ‚Ü™ ${toLocal(c.changed_at)}: ${getNameById(
                c.old_captain_id
              )} ‚Üí ${getNameById(c.new_captain_id)}`
          )
          .join("\n") || "  ‚Äî –ø–µ—Ä–µ–¥–∞—á –Ω–µ –±—É–ª–æ ‚Äî";

      const list = people.length
        ? people
            .map(
              (p) =>
                `‚Ä¢ ${p.name} (–∫.${p.room}) ‚Äî ${toLocal(
                  p.entered_at
                )} ‚Üí ${toLocal(p.exited_at)}`
            )
            .join("\n")
        : "‚Äî –Ω—ñ–∫–æ–≥–æ ‚Äî";

      const block =
        [
          `#${s.id}  ${toLocal(s.started_at)} ‚Üí ${toLocal(s.ended_at)}`,
          `–ü–µ—Ä—à–∏–π –∫–∞–ø—ñ—Ç–∞–Ω: ${firstCaptain}`,
          `–û—Å—Ç–∞–Ω–Ω—ñ–π –∫–∞–ø—ñ—Ç–∞–Ω: ${lastCaptain}`,
          `–ü–µ—Ä–µ–¥–∞—á—ñ:\n${transfers}`,
          `–£—á–∞—Å–Ω–∏–∫–∏:\n${list}`,
        ].join("\n") + "\n\n";

      if ((buf + block).length > TELEGRAM_SAFE_LIMIT) {
        blocks.push(buf.trimEnd());
        buf = block;
      } else {
        buf += block;
      }
    }
    if (buf.trim()) blocks.push(buf.trimEnd());

    const totalPages = Math.max(1, blocks.length);
    const current = Math.min(page, totalPages);
    const text = `–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${current}/${totalPages}\n\n${blocks[current - 1]}`;

    const nav = [];
    if (current > 1)
      nav.push(Markup.button.callback("¬´ –ù–∞–∑–∞–¥", `hist:${day}:${current - 1}`));
    if (current < totalPages)
      nav.push(
        Markup.button.callback("–í–ø–µ—Ä–µ–¥ ¬ª", `hist:${day}:${current + 1}`)
      );

    await sendOrEdit(
      ctx,
      text,
      nav.length ? Markup.inlineKeyboard([nav]) : undefined
    );
    await ctx.answerCbQuery().catch(() => {});
    return;
  }

  return next();
});

/* ===== –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ª–∏—à–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ–≤ ===== */

// –ù–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω–∞–º
function notifySupers(text) {
  for (const id of SUPER_ADMINS) {
    bot.telegram
      .sendMessage(id, text, { parse_mode: "Markdown" })
      .catch(() => {});
  }
}

// –°—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑ –ø—Ä–∏—á–∏–Ω–æ—é / —Ä—É—á–Ω–æ—ó –≤–∏–¥–∞—á—ñ / –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
const saRejectState = new Map(); // admin_id -> payment_id
const saGrantState = new Map(); // admin_id -> { stage: 'askUser'|'choosePlan'|'done', targetId? }
const saBlockState = new Map(); // admin_id -> asking user id

bot.on("callback_query", async (ctx, next) => {
  const data = ctx.callbackQuery.data || "";

  // --- –ß–µ—Ä–≥–∞ –æ–ø–ª–∞—Ç (—Å–ø–∏—Å–æ–∫) ---
  if (data.startsWith("sa:q:")) {
    const admin = getUser(ctx.from.id);
    if (!admin || !isAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.", { show_alert: true });
      return;
    }
    if (!isSuperAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", {
        show_alert: true,
      });
      return;
    }

    const page = Math.max(1, parseInt(data.split(":")[2] || "1", 10));
    // —Å–ø–µ—Ä—à—É review, –ø–æ—Ç—ñ–º pending
    const items = db
      .prepare(
        `SELECT * FROM payments
         WHERE status IN ('review','pending')
         ORDER BY CASE status WHEN 'review' THEN 0 ELSE 1 END, created_at ASC`
      )
      .all();

    if (!items.length) {
      await sendOrEdit(ctx, "–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è.");
      return;
    }

    const total = items.length;
    const current = Math.min(page, total);
    const p = items[current - 1];

    const u = getUser(p.user_id);

    const months = p.months || 1;
    const disc = p.discount_percent || 0;
    const amountDisplay =
      p.amount_uah != null
        ? `${p.amount_uah} –≥—Ä–Ω`
        : `${Math.round(p.amount / 100)} –≥—Ä–Ω`;

    const text =
      `–ó–∞—è–≤–∫–∞ ${current}/${total}\n` +
      `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${u?.name || p.user_id} (id:${p.user_id})\n` +
      `–ü–ª–∞–Ω: ${planName(p.plan)}\n${planDescription(p.plan)}\n` +
      `–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${months} –º—ñ—Å.${disc ? ` (–∑–Ω–∏–∂–∫–∞ ${disc}%)` : ""}\n` +
      `–°—É–º–∞: ${amountDisplay}\n` +
      `–°—Ç–∞—Ç—É—Å: ${p.status}\n` +
      `ref: ${p.ref_code}\n` +
      `–°—Ç–≤–æ—Ä–µ–Ω–æ: ${toLocal(p.created_at)}`;

    const row1 = [];
    row1.push(
      Markup.button.callback("¬´ –ù–∞–∑–∞–¥", `sa:q:${Math.max(1, current - 1)}`)
    );
    row1.push(
      Markup.button.callback("–í–ø–µ—Ä–µ–¥ ¬ª", `sa:q:${Math.min(total, current + 1)}`)
    );

    const row2 = [];
    row2.push(Markup.button.callback("–ü–æ–∫–∞–∑–∞—Ç–∏ —á–µ–∫", `sa:proof:${p.id}`));
    row2.push(Markup.button.callback("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", `sa:appr:${p.id}`));
    row2.push(Markup.button.callback("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", `sa:rej:${p.id}`));

    await sendOrEdit(ctx, text, Markup.inlineKeyboard([row1, row2]));
    await ctx.answerCbQuery().catch(() => {});
    return;
  }

  // --- –ü–æ–∫–∞–∑–∞—Ç–∏ —á–µ–∫ ---
  if (data.startsWith("sa:proof:")) {
    const admin = getUser(ctx.from.id);
    if (!admin || !isAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.", { show_alert: true });
      return;
    }
    if (!isSuperAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", {
        show_alert: true,
      });
      return;
    }

    const pid = Number(data.split(":")[2]);
    const p = db.prepare(`SELECT * FROM payments WHERE id=?`).get(pid);
    if (!p) {
      await ctx.answerCbQuery("–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", { show_alert: true });
      return;
    }
    if (!p.proof_file_id) {
      await ctx.answerCbQuery("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –Ω–∞–¥–∞–≤ —á–µ–∫.", { show_alert: true });
      return;
    }
    // –ø—Ä–æ–±—É—î–º–æ —è–∫ —Ñ–æ—Ç–æ, —è–∫—â–æ –Ω–µ –≤–∏–π–¥–µ ‚Äî —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    try {
      await bot.telegram.sendPhoto(ctx.from.id, p.proof_file_id);
    } catch {
      try {
        await bot.telegram.sendDocument(ctx.from.id, p.proof_file_id);
      } catch {}
    }
    await ctx.answerCbQuery().catch(() => {});
    return;
  }

  // --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É ---
  if (data.startsWith("sa:appr:")) {
    const pid = Number(data.split(":")[2]);
    const p = db.prepare(`SELECT * FROM payments WHERE id=?`).get(pid);

    if (!p) {
      await ctx.answerCbQuery("–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }
    if (!["pending", "review"].includes(p.status)) {
      await ctx.answerCbQuery("–ù–µ–ø—Ä–∏–¥–∞—Ç–Ω–∞ –∑–∞—è–≤–∫–∞.");
      return;
    }

    const months = Math.max(1, p.months || 1);

    // –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–µ—Ä—ñ–æ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const last = getLastSubscription(p.user_id);
    const lastEndMs = last
      ? Date.parse(last.end_at.replace(" ", "T") + "Z")
      : 0;

    // –Ω–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥: –∞–±–æ –∑—Ä–∞–∑—É, –∞–±–æ –∑ –∫—ñ–Ω—Ü—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ
    const startDate = new Date(Math.max(Date.now(), lastEndMs + 1000));
    const endDate = new Date(startDate.getTime());
    endDate.setMonth(endDate.getMonth() + months);

    const startSql = sqlFromDate(startDate);
    const endSql = sqlFromDate(endDate);
    const adminId = ctx.from.id;

    const tx = db.transaction(() => {
      // 1) –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É
      db.prepare(
        `UPDATE payments SET status='approved', approved_at=datetime('now') WHERE id=?`
      ).run(pid);

      // 2) –¥–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É-–ø–µ—Ä—ñ–æ–¥ (–Ñ–î–ò–ù–ò–ô –¥–∂–µ—Ä–µ–ª–æ —ñ—Å—Ç–∏–Ω–∏)
      addSubscription(p.user_id, p.plan, startSql, endSql);

      // 3) –ª–æ–≥ –¥—ñ—ó
      db.prepare(
        `INSERT INTO admin_actions (actor_id, action, target_user_id, payment_id, details)
     VALUES (?,?,?,?,?)`
      ).run(
        adminId,
        "approve_payment",
        p.user_id,
        p.id,
        `plan=${p.plan} months=${months} ${startSql}‚Üí${endSql}`
      );
    });

    try {
      tx();
    } catch (e) {
      console.error("approve_payment error:", e);
      await ctx.answerCbQuery("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", {
        show_alert: true,
      });
      return;
    }

    await ctx.answerCbQuery("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.");
    try {
      await bot.telegram.sendMessage(
        p.user_id,
        `‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.\n${planName(p.plan)}\n${planDescription(
          p.plan
        )}\n` +
          `–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${months} –º—ñ—Å.\n–ü–µ—Ä—ñ–æ–¥: ${toLocal(startSql)} ‚Üí ${toLocal(
            endSql
          )}`
      );
    } catch {}
    return;
  }

  // --- –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –æ–ø–ª–∞—Ç—É (–∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω–∏) ---
  if (data.startsWith("sa:rej:")) {
    const admin = getUser(ctx.from.id);
    if (!admin || !isAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.", { show_alert: true });
      return;
    }
    if (!isSuperAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", {
        show_alert: true,
      });
      return;
    }

    // –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ id
    const parts = data.split(":"); // ["sa","rej","<id>"]
    const pid = Number(parts[2]);

    const p = db.prepare(`SELECT * FROM payments WHERE id=?`).get(pid);
    if (!p || !["pending", "review"].includes(p.status)) {
      await ctx.answerCbQuery("–ù–µ–ø—Ä–∏–¥–∞—Ç–Ω–∞ –∑–∞—è–≤–∫–∞.", { show_alert: true });
      return;
    }
    saRejectState.set(admin.user_id, pid);
    await ctx.answerCbQuery().catch(() => {});
    await ctx.reply(
      "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —è–∫ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç–µ–∫—Å—Ç–æ–º)."
    );
    return;
  }

  // --- –ê–∫—Ç–∏–≤–Ω—ñ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∏ (–ª–∏—à–µ —Å—É–ø–µ—Ä–∞–¥–º) ---
  if (data.startsWith("sa:active:")) {
    const admin = getUser(ctx.from.id);
    if (!admin || !isAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.", { show_alert: true });
      return;
    }
    if (!isSuperAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", {
        show_alert: true,
      });
      return;
    }

    const parts = data.split(":");
    const page = Math.max(1, parseInt(parts[2] || "1", 10));

    // –ê–∫—Ç–∏–≤–Ω—ñ —Å–∞–º–µ "–∑–∞—Ä–∞–∑" –ø–µ—Ä—ñ–æ–¥–∏ –∑–∞ subscriptions
    const rows = db
      .prepare(
        `
    SELECT s.user_id, s.plan, s.end_at,
           u.name, u.room, u.faculty, u.username
    FROM subscriptions s
    JOIN users u ON u.user_id = s.user_id
    WHERE s.start_at <= datetime('now') AND s.end_at >= datetime('now')
    ORDER BY s.end_at DESC, u.name ASC
  `
      )
      .all();

    if (!rows.length) {
      await sendOrEdit(ctx, "–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ñ–≤.");
      await ctx.answerCbQuery().catch(() => {});
      return;
    }

    const totalPages = Math.max(1, Math.ceil(rows.length / SUBS_PER_PAGE));
    const current = Math.min(page, totalPages);
    const slice = rows.slice(
      (current - 1) * SUBS_PER_PAGE,
      current * SUBS_PER_PAGE
    );

    const lines = slice.map((r, idx) => {
      const nick = r.username ? ` @${r.username}` : "";
      return `${(current - 1) * SUBS_PER_PAGE + idx + 1}. ${r.name}${nick} (–∫.${
        r.room
      }${r.faculty ? `, ${r.faculty}` : ""}) ‚Äî ${planName(r.plan)} –¥–æ ${toLocal(
        r.end_at
      )}`;
    });

    let text =
      `–ê–∫—Ç–∏–≤–Ω—ñ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∏: ${rows.length}\n–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${current}/${totalPages}\n\n` +
      lines.join("\n");

    if (text.length > TELEGRAM_SAFE_LIMIT) {
      text = text.slice(0, TELEGRAM_SAFE_LIMIT - 3) + "...";
    }

    const nav = [];
    if (current > 1)
      nav.push(Markup.button.callback("¬´ –ù–∞–∑–∞–¥", `sa:active:${current - 1}`));
    if (current < totalPages)
      nav.push(Markup.button.callback("–í–ø–µ—Ä–µ–¥ ¬ª", `sa:active:${current + 1}`));

    await sendOrEdit(
      ctx,
      text,
      nav.length ? Markup.inlineKeyboard([nav]) : undefined
    );
    await ctx.answerCbQuery().catch(() => {});
    return;
  }

  // --- –°—Ç–∞—Ä—Ç —Ä—É—á–Ω–æ—ó –≤–∏–¥–∞—á—ñ: –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
  if (data === "sa:grant") {
    const admin = getUser(ctx.from.id);
    if (!admin || !isAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.", { show_alert: true });
      return;
    }
    if (!isSuperAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", {
        show_alert: true,
      });
      return;
    }
    saGrantState.set(admin.user_id, { stage: "askUser" });
    await ctx.answerCbQuery().catch(() => {});
    await ctx.reply("–í–≤–µ–¥—ñ—Ç—å user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—á–∏—Å–ª–æ–º).");
    return;
  }

  // --- –¢–æ–≥–ª –±–ª–æ–∫/–∞–Ω–±–ª–æ–∫: –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---
  if (data === "sa:block") {
    const admin = getUser(ctx.from.id);
    if (!admin || !isAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.", { show_alert: true });
      return;
    }
    if (!isSuperAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", {
        show_alert: true,
      });
      return;
    }
    saBlockState.set(admin.user_id, true);
    await ctx.answerCbQuery().catch(() => {});
    await ctx.reply(
      "–í–≤–µ–¥—ñ—Ç—å user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—á–∏—Å–ª–æ–º) –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è."
    );
    return;
  }

  // --- –ù–∞–¥–∞—Ç–∏/–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—Ä—É—á–Ω—É: –≤–∏–±—ñ—Ä –ø–ª–∞–Ω—É —ñ –º—ñ—Å—è—Ü—ñ–≤ ---
  if (data.startsWith("sa:grant:")) {
    // –§–æ—Ä–º–∞—Ç: sa:grant:<uid>:<plan>
    const [, , uidStr, plan] = data.split(":");
    const targetId = Number(uidStr);

    const admin = getUser(ctx.from.id);
    if (!admin || !isAdmin(admin.user_id) || !isSuperAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", {
        show_alert: true,
      });
      return;
    }

    if (!targetId || !["A", "B", "UNL"].includes(plan)) {
      await ctx.answerCbQuery("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.");
      return;
    }

    const user = getUser(targetId);
    if (!user) {
      await ctx.answerCbQuery("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", { show_alert: true });
      return;
    }
    if (!isPlanAllowedForFaculty(user.faculty, plan)) {
      await ctx.answerCbQuery("UNLIMITED –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –Ü–°–ó–Ü.", {
        show_alert: true,
      });
      return;
    }

    const rows = [];
    for (let m = 1; m <= 9; m++) {
      rows.push([
        Markup.button.callback(
          `${m} –º—ñ—Å.`,
          `sa:grantm:${targetId}:${plan}:${m}`
        ),
      ]);
    }
    await sendOrEdit(
      ctx,
      `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${user.name} (–∫.${user.room}${
        user.faculty ? `, ${user.faculty}` : ""
      }).\n` +
        `–ü–ª–∞–Ω: ${planName(plan)}\n${planDescription(plan)}\n` +
        `–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:`,
      Markup.inlineKeyboard(rows)
    );
    await ctx.answerCbQuery().catch(() => {});
    return;
  }

  if (data.startsWith("sa:grantm:")) {
    // –§–æ—Ä–º–∞—Ç: sa:grantm:<uid>:<plan>:<months>
    const [, , uidStr, plan, monthsStr] = data.split(":");
    const targetId = Number(uidStr);
    const months = clampMonths(monthsStr);

    const admin = getUser(ctx.from.id);
    if (!admin || !isAdmin(admin.user_id) || !isSuperAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", {
        show_alert: true,
      });
      return;
    }

    const user = getUser(targetId);
    if (!user) {
      await ctx.answerCbQuery("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", { show_alert: true });
      return;
    }
    if (!isPlanAllowedForFaculty(user.faculty, plan)) {
      await ctx.answerCbQuery("UNLIMITED –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –Ü–°–ó–Ü.", {
        show_alert: true,
      });
      return;
    }

    const last = getLastSubscription(targetId);
    const lastEndMs = last
      ? Date.parse(last.end_at.replace(" ", "T") + "Z")
      : 0;

    const startDate = new Date(Math.max(Date.now(), lastEndMs + 1000));
    const endDate = new Date(startDate.getTime());
    endDate.setMonth(endDate.getMonth() + months);

    const startSql = sqlFromDate(startDate);
    const endSql = sqlFromDate(endDate);

    const tx = db.transaction(() => {
      // 1) —Ç—ñ–ª—å–∫–∏ –∑–∞–ø–∏—Å –ø–µ—Ä—ñ–æ–¥—É –≤ subscriptions
      addSubscription(targetId, plan, startSql, endSql);

      // 2) –∞—É–¥–∏—Ç –¥—ñ—ó
      db.prepare(
        `INSERT INTO admin_actions (actor_id, action, target_user_id, details)
     VALUES (?,?,?,?)`
      ).run(
        admin.user_id,
        "grant_manual",
        targetId,
        `plan=${plan} months=${months} ${startSql}‚Üí${endSql}`
      );
    });

    try {
      tx();
    } catch (e) {
      console.error("grant_manual months error:", e);
      await ctx.answerCbQuery("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞—á—ñ/–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—ñ.", {
        show_alert: true,
      });
      return;
    }

    await ctx.answerCbQuery("–ì–æ—Ç–æ–≤–æ.").catch(() => {});
    await sendOrEdit(
      ctx,
      `‚úÖ –ù–∞–¥–∞–Ω–æ/–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –¥–æ—Å—Ç—É–ø –≤—Ä—É—á–Ω—É.\n${planName(
        plan
      )}\n${planDescription(plan)}\n` +
        `–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${months} –º—ñ—Å.\n–ü–µ—Ä—ñ–æ–¥: ${toLocal(startSql)} ‚Üí ${toLocal(
          endSql
        )}`
    );
    try {
      await bot.telegram.sendMessage(
        targetId,
        `‚úÖ –í–∞–º –Ω–∞–¥–∞–Ω–æ/–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –¥–æ—Å—Ç—É–ø –≤—Ä—É—á–Ω—É.\n${planName(
          plan
        )}\n${planDescription(plan)}\n` +
          `–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${months} –º—ñ—Å.\–Ω–ü–µ—Ä—ñ–æ–¥: ${toLocal(startSql)} ‚Üí ${toLocal(
            endSql
          )}`
      );
    } catch {}
    return;
  }
  // --- –ñ—É—Ä–Ω–∞–ª –¥—ñ–π —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ ---
  if (data.startsWith("sa:log:")) {
    const admin = getUser(ctx.from.id);
    if (!admin || !isAdmin(admin.user_id) || !isSuperAdmin(admin.user_id)) {
      await ctx.answerCbQuery("–õ–∏—à–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.", {
        show_alert: true,
      });
      return;
    }

    const LOGS_PER_PAGE = 20;
    const parts = data.split(":"); // sa:log:<page>
    const page = Math.max(1, parseInt(parts[2] || "1", 10));

    const logs = db
      .prepare(
        `
      SELECT a.id, a.actor_id, a.action, a.target_user_id, a.payment_id, a.details,
             a.created_at,
             ua.name AS actor_name,
             ut.name AS target_name
      FROM admin_actions a
      LEFT JOIN users ua ON ua.user_id = a.actor_id
      LEFT JOIN users ut ON ut.user_id = a.target_user_id
      ORDER BY a.id DESC
    `
      )
      .all();

    if (!logs.length) {
      await sendOrEdit(ctx, "–ñ—É—Ä–Ω–∞–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.");
      await ctx.answerCbQuery().catch(() => {});
      return;
    }

    const totalPages = Math.max(1, Math.ceil(logs.length / LOGS_PER_PAGE));
    const current = Math.min(page, totalPages);
    const slice = logs.slice(
      (current - 1) * LOGS_PER_PAGE,
      current * LOGS_PER_PAGE
    );

    const lines = slice.map((r, idx) => {
      const n = (current - 1) * LOGS_PER_PAGE + idx + 1;
      const when = toLocal(r.created_at);
      const actor = r.actor_name
        ? `${r.actor_name} (${r.actor_id})`
        : `${r.actor_id}`;
      const target = r.target_user_id
        ? r.target_name
          ? `${r.target_name} (${r.target_user_id})`
          : `${r.target_user_id}`
        : "‚Äî";
      const pay = r.payment_id ? `, payment_id=${r.payment_id}` : "";
      const details = r.details ? `\n   ‚Ä¢ ${r.details}` : "";
      return `${n}. ${when} ‚Äî ${actor}: ${r.action} ‚Üí ${target}${pay}${details}`;
    });

    let text =
      `–ñ—É—Ä–Ω–∞–ª –¥—ñ–π (–æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏)\n–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${current}/${totalPages}\n\n` +
      lines.join("\n");

    if (text.length > TELEGRAM_SAFE_LIMIT) {
      const chunks = splitByLimit(text);
      text = chunks.shift();
      for (const ch of chunks) await ctx.reply(ch);
    }

    const nav = [];
    if (current > 1)
      nav.push(Markup.button.callback("¬´ –ù–∞–∑–∞–¥", `sa:log:${current - 1}`));
    if (current < totalPages)
      nav.push(Markup.button.callback("–í–ø–µ—Ä–µ–¥ ¬ª", `sa:log:${current + 1}`));

    await sendOrEdit(
      ctx,
      text,
      nav.length ? Markup.inlineKeyboard([nav]) : undefined
    );
    await ctx.answerCbQuery().catch(() => {});
    return;
  }

  return next();
});

// –ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω—Å—å–∫–∏—Ö —Å—Ç–∞–Ω—ñ–≤ (reject/ grant / block)
bot.on("text", async (ctx, next) => {
  const adminId = ctx.from.id;

  // –ø—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
  if (saRejectState.has(adminId)) {
    const pid = saRejectState.get(adminId);
    saRejectState.delete(adminId);

    const p = db.prepare(`SELECT * FROM payments WHERE id=?`).get(pid);
    if (!p || !["pending", "review"].includes(p.status)) {
      return ctx.reply("–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —ó—ó –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.");
    }

    const reason = (ctx.message.text || "–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è").slice(0, 500);
    const admin = getUser(adminId);

    const tx = db.transaction(() => {
      db.prepare(
        `UPDATE payments SET status='rejected', rejected_at=datetime('now'), comment=? WHERE id=?`
      ).run(reason, pid);
      db.prepare(
        `INSERT INTO admin_actions (actor_id, action, target_user_id, payment_id, details)
         VALUES (?,?,?,?,?)`
      ).run(admin.user_id, "reject_payment", p.user_id, p.id, reason);
    });
    tx();

    try {
      await bot.telegram.sendMessage(
        p.user_id,
        `‚ùå –û–ø–ª–∞—Ç—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ: ${reason}`
      );
    } catch {}

    return ctx.reply("–í—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ.");
  }

  // —Ä—É—á–Ω–µ –Ω–∞–¥–∞–Ω–Ω—è/–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è (–≤–≤—ñ–¥ user_id)
  if (saGrantState.has(adminId)) {
    const st = saGrantState.get(adminId);
    if (st.stage === "askUser") {
      const target = parseInt((ctx.message.text || "").trim(), 10);
      if (!Number.isFinite(target)) {
        return ctx.reply("–û—á—ñ–∫—É–≤–∞–≤—Å—è user_id (—á–∏—Å–ª–æ–º). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      }
      const user = getUser(target);
      if (!user) {
        return ctx.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      }
      // –≤–∏–±—ñ—Ä –ø–ª–∞–Ω—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É
      const rows = [
        [Markup.button.callback("1 –ü–ª–∞–Ω", `sa:grant:${target}:A`)],
        [Markup.button.callback("2 –ü–ª–∞–Ω", `sa:grant:${target}:B`)],
      ];
      if (isPlanAllowedForFaculty(user.faculty, "UNL")) {
        rows.push([
          Markup.button.callback("UNLIMITED", `sa:grant:${target}:UNL`),
        ]);
      }
      saGrantState.set(adminId, { stage: "choosePlan", targetId: target });
      return ctx.reply(
        `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${user.name} (–∫.${user.room}${
          user.faculty ? `, ${user.faculty}` : ""
        }). –û–±–µ—Ä—ñ—Ç—å –ø–ª–∞–Ω:`,
        Markup.inlineKeyboard(rows)
      );
    }
  }

  // –±–ª–æ–∫/—Ä–æ–∑–±–ª–æ–∫
  if (saBlockState.has(adminId)) {
    saBlockState.delete(adminId);
    const target = parseInt((ctx.message.text || "").trim(), 10);
    if (!Number.isFinite(target)) {
      return ctx.reply("–û—á—ñ–∫—É–≤–∞–≤—Å—è user_id (—á–∏—Å–ª–æ–º). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    }
    const user = getUser(target);
    if (!user) return ctx.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");

    const newBlocked = user.blocked ? 0 : 1;
    db.prepare(`UPDATE users SET blocked=? WHERE user_id=?`).run(
      newBlocked,
      target
    );

    db.prepare(
      `INSERT INTO admin_actions (actor_id, action, target_user_id, details)
       VALUES (?,?,?,?)`
    ).run(adminId, newBlocked ? "block_user" : "unblock_user", target, "");

    try {
      await bot.telegram.sendMessage(
        target,
        newBlocked
          ? "‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏."
          : "‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏."
      );
    } catch {}

    return ctx.reply(
      newBlocked ? "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ." : "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ."
    );
  }

  return next();
});

/* ===== –ö–Ω–æ–ø–∫–∏ –∑–∞–ª—É: –°—Ç–∞—Ç—É—Å / –ü–æ—á–∞—Ç–∏ / –£–≤—ñ–π—Ç–∏ / –í–∏–π—Ç–∏ / –ü–µ—Ä–µ–¥–∞—Ç–∏ –∫–∞–ø—ñ—Ç–∞–Ω–∞ ===== */

function requireNotBlocked(u, ctx) {
  if (u.blocked) {
    ctx.reply("‚õî –í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.");
    return false;
  }
  return true;
}

function requirePaidGate(u, ctx) {
  const curSub = getCurrentSubscription(u.user_id);
  if (!curSub) {
    ctx.reply(
      "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–û–ø–ª–∞—Ç–∏—Ç–∏¬ª."
    );
    return false;
  }
  const activePlan = curSub.plan;
  if (!isAllowedToday(activePlan)) {
    ctx.reply(
      `–ó–∞ –≤–∞—à–∏–º –ø–ª–∞–Ω–æ–º –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–µ —É –¥–Ω—ñ: ${daysTextForPlan(
        activePlan
      )}.`
    );
    return false;
  }
  return true;
}

// –°—Ç–∞—Ç—É—Å
bot.hears("–°—Ç–∞—Ç—É—Å", async (ctx) => {
  const u = requireRegistered(ctx);
  if (!u) return;

  const s = getActiveSession();
  if (!s)
    return ctx.reply(
      "–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó.",
      mainKeyboard(u.user_id, null, false)
    );

  const part = listParticipants(s.id);
  const captainName = getNameById(s.captain_id);
  await ctx.reply(
    `–ê–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è\n–ö–∞–ø—ñ—Ç–∞–Ω: ${captainName}\n–í—Å–µ—Ä–µ–¥–∏–Ω—ñ: ${part.length}`,
    mainKeyboard(u.user_id, s, !!getOpenVisit(s.id, u.user_id))
  );
});

// ‚úÖ –í–∞—Ö—Ç–∞: –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
bot.hears("üëÆ –í—Å—Ç–∞—Ç–∏ –Ω–∞ –≤–∞—Ö—Ç—É", (ctx) => {
  const uid = ctx.from.id;
  if (!WATCHER_ALLOW.has(Number(uid))) {
    return ctx.reply("‚õî –¶—è –æ–ø—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–æ–≥–æ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É.");
  }
  setWatcher(uid, true);
  const s = getActiveSession();
  const inside = s ? !!getOpenVisit(s.id, uid) : false;
  ctx.reply(
    "‚úÖ –í–∏ —Å—Ç–∞–ª–∏ –Ω–∞ –≤–∞—Ö—Ç—É. –ë—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ä—Ç/–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ–π.",
    mainKeyboard(uid, s, inside)
  );
});

bot.hears("‚ùå –í–∏–π—Ç–∏ –∑ –≤–∞—Ö—Ç–∏", (ctx) => {
  const uid = ctx.from.id;
  if (!WATCHER_ALLOW.has(Number(uid))) {
    return ctx.reply("‚õî –¶—è –æ–ø—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–æ–≥–æ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É.");
  }
  setWatcher(uid, false);
  const s = getActiveSession();
  const inside = s ? !!getOpenVisit(s.id, uid) : false;
  ctx.reply(
    "üëã –í–∏ –≤–∏–π—à–ª–∏ –∑ –≤–∞—Ö—Ç–∏. –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω–µ –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏–º—É—Ç—å.",
    mainKeyboard(uid, s, inside)
  );
});

// --- –ü–æ—á–∞—Ç–∏ —Å–µ—Å—ñ—é (–Ω–∞–¥—ñ–π–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ —è–≤–Ω–∏–º–∏ timestamp —Ç–∞ lastInsertRowid)
bot.hears("–ü–æ—á–∞—Ç–∏ —Å–µ—Å—ñ—é", async (ctx) => {
  const u = requireRegistered(ctx);
  if (!u) return;
  if (!requireNotBlocked(u, ctx)) return;
  if (!requirePaidGate(u, ctx)) return;

  try {
    const now = new Date();
    const hourKyiv = Number(
      new Intl.DateTimeFormat("uk-UA", {
        hour: "2-digit",
        hour12: false,
        timeZone: TZ, // TZ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ 'Europe/Kyiv'
      }).format(now)
    );

    if (hourKyiv >= 23 || hourKyiv < 6) {
      return ctx.reply("–°—Ç–∞—Ä—Ç —Å–µ—Å—ñ—ó –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ –∑ 06:00, —Ç–∞ –¥–æ 23:00");
    }
  } catch (_) {
    // fallback –Ω–∞ UTC+2/UTC+3 –Ω–µ –Ω—É–∂–µ–Ω, TZ –µ—Å—Ç—å; –ø—Ä–∏ –æ—à–∏–±–∫–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è:
    // return ctx.reply('–¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–∞—Ä—Ç—É–≤–∞—Ç–∏ —Å–µ—Å—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }

  const existing = getActiveSession();
  if (existing) {
    const inside = !!getOpenVisit(existing.id, u.user_id);
    return ctx.reply(
      "–°–µ—Å—ñ—è –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.",
      mainKeyboard(u.user_id, existing, inside)
    );
  }

  let newSession = null;
  try {
    const createTx = db.transaction((user_id) => {
      // –ü–æ–¥–≤—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
      const act = db.prepare(`SELECT id FROM sessions WHERE active=1`).get();
      if (act) throw new Error("ALREADY_ACTIVE");

      db.prepare(
        `INSERT INTO sessions (captain_id, started_at, active)
VALUES (?, datetime('now'), 1)`
      ).run(user_id);

      const rowid = db.prepare(`SELECT last_insert_rowid() AS id`).get().id;

      db.prepare(
        `INSERT INTO visits (session_id, user_id, entered_at)
VALUES (?, ?, datetime('now'))`
      ).run(rowid, user_id);

      db.prepare(
        `INSERT INTO captain_changes (session_id, old_captain_id, new_captain_id, changed_at)
VALUES (?, ?, ?, datetime('now'))`
      ).run(rowid, null, user_id);

      const s = db.prepare(`SELECT * FROM sessions WHERE id=?`).get(rowid);
      return s;
    });

    newSession = createTx(u.user_id);
  } catch (e) {
    if (e && e.message === "ALREADY_ACTIVE") {
      const s = getActiveSession();
      const inside = s ? !!getOpenVisit(s.id, u.user_id) : false;
      return ctx.reply(
        "–°–µ—Å—ñ—é –≤–∂–µ —Ö—Ç–æ—Å—å —Ä–æ–∑–ø–æ—á–∞–≤ —â–æ–π–Ω–æ.",
        mainKeyboard(u.user_id, s, inside)
      );
    }
    console.error("start_session error:", e);
    const s = getActiveSession();
    const inside = s ? !!getOpenVisit(s.id, u.user_id) : false;
    return ctx.reply(
      "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—á–∞—Ç–∏ —Å–µ—Å—ñ—é. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞.",
      mainKeyboard(u.user_id, s, inside)
    );
  }

  // –±–µ—Ä–µ–º–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏–π —á–∞—Å —Å—Ç–∞—Ä—Ç—É –∑ –ë–î (–∞–±–æ now —è–∫ fallback)
  const startedAt = newSession?.started_at || nowSql();
  try {
    await notifyWatchers(
      [
        "üîì <b>–°–µ—Å—ñ—é —Ä–æ–∑–ø–æ—á–∞—Ç–æ</b>",
        `–ö–∞–ø—ñ—Ç–∞–Ω: ${esc(u.name)} (–∫.${esc(u.room || "‚Äî")})`,
        `–ß–∞—Å: ${toLocal(startedAt)}`,
      ].join("\n")
    );
  } catch (e) {
    console.error("notifyWatchers start error:", e?.message || e);
  }

  if (GROUP_CHAT_ID) {
    updateStatusPost(bot, GROUP_CHAT_ID).catch(() => {});
  }

  // –ö–ª—é—á–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
  return ctx.reply(
    "–°–µ—Å—ñ—é —Ä–æ–∑–ø–æ—á–∞—Ç–æ. –í–∏ ‚Äî –∫–∞–ø—ñ—Ç–∞–Ω.",
    mainKeyboard(u.user_id, newSession, true)
  );
});

// –£–≤—ñ–π—Ç–∏
bot.hears("–£–≤—ñ–π—Ç–∏", async (ctx) => {
  const u = requireRegistered(ctx);
  if (!u) return;
  if (!requireNotBlocked(u, ctx)) return;
  if (!requirePaidGate(u, ctx)) return;

  const s = getActiveSession();
  if (!s)
    return ctx.reply("–°–µ—Å—ñ—ó –Ω–µ–º–∞—î.", mainKeyboard(u.user_id, null, false));

  if (getOpenVisit(s.id, u.user_id))
    return ctx.reply("–í–∏ –≤–∂–µ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ.", mainKeyboard(u.user_id, s, true));

  const had = db
    .prepare(`SELECT 1 FROM visits WHERE session_id=? AND user_id=?`)
    .get(s.id, u.user_id);

  try {
    db.prepare(
      `INSERT INTO visits (session_id, user_id, entered_at)
   VALUES (?, ?, datetime('now'))`
    ).run(s.id, u.user_id);
  } catch (e) {
    console.error("Enter error:", e.message);
    return ctx.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏.", mainKeyboard(u.user_id, s, false));
  }

  if (GROUP_CHAT_ID) await updateStatusPost(bot, GROUP_CHAT_ID).catch(() => {});
  const cntAfter = countParticipants(s.id);
  await notifyCaptain(
    s,
    `üü¢ ${u.name} —É–≤—ñ–π—à–æ–≤(–ª–∞). –ó–∞—Ä–∞–∑ —É –∑–∞–ª—ñ: ${cntAfter}.`,
    u.user_id
  );
  return ctx.reply("–ü–æ–∑–Ω–∞—á–µ–Ω–æ: —É–≤—ñ–π—à–ª–∏.", mainKeyboard(u.user_id, s, true));
});

// –í–∏–π—Ç–∏
bot.hears("–í–∏–π—Ç–∏", async (ctx) => {
  const u = requireRegistered(ctx);
  if (!u) return;
  if (!requireNotBlocked(u, ctx)) return;

  const s = getActiveSession();
  if (!s)
    return ctx.reply("–°–µ—Å—ñ—ó –Ω–µ–º–∞—î.", mainKeyboard(u.user_id, null, false));

  const open = getOpenVisit(s.id, u.user_id);
  if (!open)
    return ctx.reply("–í–∏ –π —Ç–∞–∫ –∑–æ–≤–Ω—ñ.", mainKeyboard(u.user_id, s, false));

  if (s.captain_id === u.user_id) {
    const count = countParticipants(s.id);
    if (count > 1) {
      const ik = Markup.inlineKeyboard([
        [Markup.button.callback("–ü–µ—Ä–µ–¥–∞—Ç–∏ –∫–∞–ø—ñ—Ç–∞–Ω–∞", "cap:transfer")],
        [Markup.button.callback("–ó—Ä–æ–∑—É–º—ñ–ª–æ", "cap:alert")],
      ]);
      return ctx.reply(
        `‚ö†Ô∏è –í–∏ ‚Äî –∫–∞–ø—ñ—Ç–∞–Ω. –í—Å–µ—Ä–µ–¥–∏–Ω—ñ —â–µ ${
          count - 1
        } –ª—é–¥(–µ–π). –°–ø–æ—á–∞—Ç–∫—É *–ø–µ—Ä–µ–¥–∞–π—Ç–µ –∫–∞–ø—ñ—Ç–∞–Ω–∞*.`,
        { parse_mode: "Markdown", ...ik }
      );
    }
    db.prepare(
      `UPDATE visits
   SET exited_at = datetime('now')
   WHERE id = (
     SELECT id FROM visits
     WHERE session_id=? AND user_id=? AND exited_at IS NULL
     ORDER BY entered_at DESC
     LIMIT 1
   )`
    ).run(s.id, u.user_id);
    db.prepare(
      `UPDATE sessions SET ended_at=datetime('now'), active=0 WHERE id=?`
    ).run(s.id);
    // [WATCHERS] –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    // –ù–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è ‚Äî –≤–∂–µ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –ø–æ–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é
    // [WATCHERS] –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
    const endedAt = nowSql();
    try {
      await notifyWatchers(
        [
          "üîí <b>–°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>",
          `–ö–∞–ø—ñ—Ç–∞–Ω: ${esc(u.name)} (–∫.${esc(u.room || "‚Äî")})`,
          `–ü–æ—á–∞—Ç–æ–∫: ${toLocal(s.started_at)}`,
          `–ö—ñ–Ω–µ—Ü—å: ${toLocal(endedAt)}`,
        ].join("\n")
      );
    } catch (e) {
      console.error("notifyWatchers end error:", e?.message || e);
    }

    return ctx.reply(
      "–°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–≤–µ—Ä—ñ –∑–∞—á–∏–Ω–µ–Ω–æ.",
      mainKeyboard(u.user_id, null, false)
    );
  }

  db.prepare(
    `UPDATE visits
   SET exited_at = datetime('now')
   WHERE id = (
     SELECT id FROM visits
     WHERE session_id=? AND user_id=? AND exited_at IS NULL
     ORDER BY entered_at DESC
     LIMIT 1
   )`
  ).run(s.id, u.user_id);
  if (GROUP_CHAT_ID) await updateStatusPost(bot, GROUP_CHAT_ID).catch(() => {});
  const cntAfter = countParticipants(s.id);
  await notifyCaptain(
    s,
    `üî¥ ${u.name} –≤–∏–π—à–æ–≤(–ª–∞). –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${cntAfter}.`,
    u.user_id
  );

  return ctx.reply("–ü–æ–∑–Ω–∞—á–µ–Ω–æ: –≤–∏–π—à–ª–∏.", mainKeyboard(u.user_id, s, false));
});

// –ü–µ—Ä–µ–¥–∞—Ç–∏ –∫–∞–ø—ñ—Ç–∞–Ω–∞
async function handleTransfer(ctx) {
  const u = requireRegistered(ctx);
  if (!u) return;

  const s = getActiveSession();
  if (!s)
    return ctx.reply("–°–µ—Å—ñ—ó –Ω–µ–º–∞—î.", mainKeyboard(u.user_id, null, false));
  if (s.captain_id !== u.user_id)
    return ctx.reply(
      "–õ–∏—à–µ –∫–∞–ø—ñ—Ç–∞–Ω –º–æ–∂–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏.",
      mainKeyboard(u.user_id, s, true)
    );

  const people = listParticipants(s.id).filter((p) => p.user_id !== u.user_id);
  if (!people.length)
    return ctx.reply(
      "–ù—ñ–∫–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–∞–ø—ñ—Ç–∞–Ω–∞ ‚Äî –≤–∏ –æ–¥–∏–Ω —É –∑–∞–ª—ñ.",
      mainKeyboard(u.user_id, s, true)
    );

  const buttons = people.map((p) => [
    Markup.button.callback(p.name, `xfer:${p.user_id}`),
  ]);
  return ctx.reply("–ö–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–∞–ø—ñ—Ç–∞–Ω–∞?", Markup.inlineKeyboard(buttons));
}
bot.hears("–ü–µ—Ä–µ–¥–∞—Ç–∏ –∫–∞–ø—ñ—Ç–∞–Ω–∞", handleTransfer);

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ callback'–∏ –∫–∞–ø—ñ—Ç–∞–Ω—É
bot.on("callback_query", async (ctx, next) => {
  const data = ctx.callbackQuery.data || "";

  if (data === "cap:alert") {
    await ctx.answerCbQuery(
      "–í–∏ ‚Äî –∫–∞–ø—ñ—Ç–∞–Ω. –ü–æ–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —ñ–Ω—à—ñ ‚Äî –≤–∏–π—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∫–∞–ø—ñ—Ç–∞–Ω–∞.",
      { show_alert: true }
    );
    return;
  }
  if (data === "cap:transfer") {
    await handleTransfer(ctx);
    await ctx.answerCbQuery();
    return;
  }
  if (data.startsWith("xfer:")) {
    const targetId = Number(data.split(":")[1]);
    const s = getActiveSession();
    if (!s) return ctx.answerCbQuery("–°–µ—Å—ñ—ó –Ω–µ–º–∞—î.");

    const user_id = ctx.from.id;
    if (s.captain_id !== user_id)
      return ctx.answerCbQuery("–õ–∏—à–µ —á–∏–Ω–Ω–∏–π –∫–∞–ø—ñ—Ç–∞–Ω.");

    const targetInside = getOpenVisit(s.id, targetId);
    if (!targetInside) return ctx.answerCbQuery("–¶—è –ª—é–¥–∏–Ω–∞ –≤–∂–µ –Ω–µ –≤ –∑–∞–ª—ñ.");

    db.prepare(
      `INSERT INTO captain_changes (session_id, old_captain_id, new_captain_id)
       VALUES (?,?,?)`
    ).run(s.id, s.captain_id, targetId);
    db.prepare(`UPDATE sessions SET captain_id=? WHERE id=?`).run(
      targetId,
      s.id
    );

    // –õ–° –Ω–æ–≤–æ–º—É –∫–∞–ø—ñ—Ç–∞–Ω—É
    try {
      const updated = getActiveSession();
      const inside = !!getOpenVisit(updated.id, targetId);
      const cnt = countParticipants(updated.id);
      await bot.telegram.sendMessage(
        targetId,
        `üëë –í–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –∫–∞–ø—ñ—Ç–∞–Ω—Å—Ç–≤–æ.\n–ó–∞—Ä–∞–∑ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ: ${
          cnt - 1
        } —ñ–Ω—à–∏—Ö(–∞).\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–∞–ø—ñ—Ç–∞–Ω–∞ –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º.`,
        mainKeyboard(targetId, updated, inside)
      );
    } catch {}

    await ctx.answerCbQuery("–ö–∞–ø—ñ—Ç–∞–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ.");
    if (GROUP_CHAT_ID)
      await updateStatusPost(bot, GROUP_CHAT_ID).catch(() => {});
    return;
  }

  return next();
});

/* ===== –ó–∞–ø—É—Å–∫ ===== */
bot
  .launch()
  .then(() => console.log("Bot started"))
  .catch(console.error);

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
